// Build project when PR open
// Remove data when PR closed
def writeGitHubPullRequestStatus(text, state)
{
	setGitHubPullRequestStatus context: 'Jenkins', message: text, state: state
}


pipeline {
	agent { node { label 'test-Toplyvo-core-Mayatskiy' } }

	stages {

		stage ('Checkout from git') {
			when {
				expression { "${GITHUB_PR_STATE}" == 'OPEN' }
			}
			steps {
				writeGitHubPullRequestStatus("${env.STAGE_NAME}", 'PENDING')

				script {
					try {
						checkout([
							$class: 'GitSCM',
							branches: [[name: '*/${GITHUB_PR_SOURCE_BRANCH}']],
							doGenerateSubmoduleConfigurations: false,
							extensions: [[
								$class: 'RelativeTargetDirectory',
								relativeTargetDir: '${GITHUB_PR_SOURCE_BRANCH}'
							]],
							submoduleCfg: [],
							userRemoteConfigs: [[
								credentialsId: '7303d04c-541b-49a3-83f2-834b64810cc5',
								url: 'git@github.com:transloyd/toplyvotransporter.git'
							]]
						])
					}
					catch (exc) {
						sh "docker-compose down"
						currentBuild.result = 'FAILURE'
						currentStage.result = 'FAILURE'
					}
				}


			}
		}

		stage ('Prepare environment') {
			when {
				expression { "${GITHUB_PR_STATE}" == 'OPEN' }
			}
			steps {
				writeGitHubPullRequestStatus("${env.STAGE_NAME}", 'PENDING')
				dir("${GITHUB_PR_SOURCE_BRANCH}") {
					script {
						try {
							sh "cp .env.test .env"
                            sh "cp docker-compose.jenkins.yml docker-compose.yml"
						}
						catch (exc) {
							sh "docker-compose down"
							currentBuild.result = 'FAILURE'
							currentStage.result = 'FAILURE'
						}

					}

				}
			}
		}

		stage ('Run docker-compose') {
			environment {
				CONTAINER_NAME_PREFIX="${GITHUB_PR_SOURCE_BRANCH}"
				RABBITMQ_URL="amqp://guest:guest@${GITHUB_PR_SOURCE_BRANCH}_transporter_rabbitmq:5672"
				REDIS_HOST="${GITHUB_PR_SOURCE_BRANCH}_transporter_redis"
				DATABASE_URL="mysql://transporter_user:MGM2d68ubMLT@${GITHUB_PR_SOURCE_BRANCH}_transporter_mysql:3306/transporter_test"
				API_TOPLYVO_BASE_URL="http://dev_toplivo_back_varnish_nginx"
				MYSQL_EXPOSE_PORT="3306"
				NGINX_EXPOSE_PORT="80"
				SUBNET="192.168.140.0/24"
			}
			when {
				expression { "${GITHUB_PR_STATE}" == 'OPEN' }
			}
			steps {
				writeGitHubPullRequestStatus("${env.STAGE_NAME}", 'PENDING')
				dir("${GITHUB_PR_SOURCE_BRANCH}") {
					script {
						try {
							sh '''
								docker-compose down
								docker-compose up -d --build

								docker-compose exec php composer install
								docker-compose exec php php bin/console rabbitmq-supervisor:rebuild
								docker-compose exec php php bin/console doctrine:database:create --if-not-exists;
								docker-compose exec php php bin/console doctrine:migrations:migrate --allow-no-migration --no-interaction
							'''
						}
						catch (exc) {
							sh "docker-compose down"
							currentBuild.result = 'FAILURE'
							currentStage.result = 'FAILURE'
						}

					}
				}
			}
		}


		stage ('Close PR: stop docker')
		{
			when {
				expression { "${GITHUB_PR_STATE}" == 'CLOSED' }
			}
			steps
			{
				writeGitHubPullRequestStatus("${env.STAGE_NAME}", 'PENDING')
				dir("${GITHUB_PR_SOURCE_BRANCH}") {
					sh 'docker-compose down'
				}
			}
		}

		stage ('Close PR: remove directory')
		{
			when {
				expression { "${GITHUB_PR_STATE}" == 'CLOSED' }
			}
			steps
			{
				writeGitHubPullRequestStatus("${env.STAGE_NAME}", 'PENDING')
				dir("${GITHUB_PR_SOURCE_BRANCH}") {
					sh 'pwd'
					sh 'ls -la'
				}
			}
		}


	}

	post {
		success {
			writeGitHubPullRequestStatus('Job finished', 'SUCCESS')
		}
		failure {
			writeGitHubPullRequestStatus('Job finished', 'FAILURE')
		}
	}
}