def Dev = [id:'10107']
def Stage = [id:'10108']
def Prod = [id:'10109']
def Local = [id:'10106']

@NonCPS
def extractIssueID(text)
{
	return (text =~ /(TPLV-\d{1,})/)[0][1]
}

@NonCPS
def ensureMerged(text, regexp)
{
	return (text =~ regexp).find()
}

def setTaskEnv(issueID, state)
{
	def issueEnv = [fields: [customfield_10049: state]]
	jiraEditIssue idOrKey: issueID, issue: issueEnv, site: 'Jira Toplyvo'
}

pipeline {
	agent { node { label 'test-Toplyvo-core-Mayatskiy' } }

	stages {

		stage ('Test PR merging') {
			steps {
				script {
					def jsonObj = readJSON text: "${HEAD_COMMIT}"
					def PRMessage = "${jsonObj.message}"
	                def pattern = /.*Merge pull request*/

	                if (ensureMerged(PRMessage, pattern)) {
	                    def issueID = extractIssueID(PRMessage)
                        setTaskEnv(issueID, Local)
                        issueID = null
                    }
                }
			}
		}
	}
}