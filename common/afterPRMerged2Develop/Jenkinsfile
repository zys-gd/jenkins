def Dev = [id:'10107']
def Stage = [id:'10108']
def Prod = [id:'10109']
def Local = [id:'10106']

//def jsonObj = readJSON text: "${HEAD_COMMIT}"

@NonCPS
def extractIssueID()
{
	return ("${COMMIT_MESSAGE}" =~ /(TPLV-\d{1,})/)[0][1]
}

@NonCPS
def ensureMerged()
{
	return ("${COMMIT_MESSAGE}" =~ /.*Merge pull request*/).find()
}

def ensureDevTargetBranch()
{
	return "${BRANCH_FULL_PATH}" == 'refs/heads/develop'
}

def setTaskEnv(issueID, state)
{
	def issueEnv = [fields: [customfield_10049: state]]
	jiraEditIssue idOrKey: issueID, issue: issueEnv, site: 'Jira Toplyvo'
}

echo "Repository " + "${REPOSITORY_NAME}"
echo "Branch " + "${BRANCH_FULL_PATH}"

buildName "${GITHUB_PR_SOURCE_BRANCH}"
buildDescription "Checking for ${GITHUB_PR_SOURCE_BRANCH}"
if(ensureMerged() && ensureDevTargetBranch()) {
    def issueID = extractIssueID()
    setTaskEnv(issueID, Dev)
    echo "Update issue " + issueID + " from repository " + "${REPOSITORY_NAME}"

    gitHubPRStatus githubPRMessage('Set Jira issue ENV to Dev')
    buildDescription "Set Jira issue ${GITHUB_PR_SOURCE_BRANCH} ENV to Dev "



}
