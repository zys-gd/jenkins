import groovy.transform.Field
@Field
def Dev = [id:'10107']
@Field
def Stage = [id:'10108']
@Field
def Prod = [id:'10109']
@Field
def Local = [id:'10106']

//def jsonObj = readJSON text: "${HEAD_COMMIT}"

@NonCPS
def extractIssueID()
{
	return ("${COMMIT_MESSAGE}" =~ /(TPLV-\d{1,})/)[0][1]
}

@NonCPS
def ensureMerged()
{
	return ("${COMMIT_MESSAGE}" =~ /.*Merge pull request*/).find()
}

def ensureDevTargetBranch()
{
	return "${BRANCH_FULL_PATH}" == 'refs/heads/develop'
}

def getEnvironment()
{

	def env = [];
	switch(BRANCH_FULL_PATH) {
		case 'refs/heads/develop':
			env = ['DEV', Dev];
			break;
		case 'refs/heads/stage':
            env = ['STAGE', Stage];
            break;
		case 'refs/heads/master':
            env = ['PROD', Prod];
            break;
		default:
			env = ['LOCAL', Local];
			break;
	}

	return env
}

def setTaskEnv(issueID, state)
{
	def issueEnv = [fields: [customfield_10049: state]]
	jiraEditIssue idOrKey: issueID, issue: issueEnv, site: 'Jira Toplyvo'
}

node ('master') {
	cleanWs()
	echo "Repository " + "${REPOSITORY_NAME}"
	echo "Branch " + "${BRANCH_FULL_PATH}"

	def issueID = extractIssueID()
	buildName "${issueID} in ${REPOSITORY_NAME}"
	buildDescription "Checking for ${issueID}"

	def env = getEnvironment();
	if(ensureMerged()) {
	    setTaskEnv(issueID, env[1])
	    echo "Update issue " + issueID + " from repository " + "${REPOSITORY_NAME}"

	    gitHubPRStatus githubPRMessage('Set Jira issue ENV to ' + env[0])
	    buildDescription "Set Jira issue ${issueID} ENV to " + env[0]

		try {
			checkout([
				$class: 'GitSCM',
				branches: [[name: '*/${issueID}']],
				doGenerateSubmoduleConfigurations: false,
				extensions: [[
					$class: 'RelativeTargetDirectory',
					relativeTargetDir: '${issueID}'
				]],
				submoduleCfg: [],
				userRemoteConfigs: [[
					credentialsId: '7303d04c-541b-49a3-83f2-834b64810cc5',
					url: 'git@github.com:transloyd/${REPOSITORY_NAME}.git'
				]]
			])
			dir("${issueID}") {
			    sshagent(['7303d04c-541b-49a3-83f2-834b64810cc5']) {
			        sh "git branch -d ${issueID}"
			    }
			}
		} catch (exc) {}

	} else if(env[0] == 'LOCAL') {
		setTaskEnv(issueID, env[1])
		buildDescription "LOCAL"
	}
		objIssue = jiraGetIssue idOrKey: issueID, site: 'Jira Toplyvo'
		println(objIssue.data.fields)
		println('////////////////////////')
		println(objIssue.data.fields.customfield_10049)
	cleanWs()
}
