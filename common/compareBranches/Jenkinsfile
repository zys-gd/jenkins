import groovy.transform.Field
@Field
def REPOSITORIES = ['core.toplyvo.app','toplyvotransporter','toplyvodesktop','toplyvosmsauth','insurance']

pipeline {
	agent { node { label 'master' } }
	options {
		skipDefaultCheckout true
	}
	stages {
		stage('Comparing branches') {
			steps {
				script {
					cleanWs()
					def description = '';
					try {
						REPOSITORIES.each {value ->
							checkout([
								$class: 'GitSCM',
								branches: [[name: '*/stage']],
								doGenerateSubmoduleConfigurations: false,
								extensions: [[
									$class: 'RelativeTargetDirectory',
									relativeTargetDir: "${value}"
								]],
								submoduleCfg: [],
								userRemoteConfigs: [[
									credentialsId: '7303d04c-541b-49a3-83f2-834b64810cc5',
									url: "git@github.com:transloyd/${value}.git"
								]]
							])
							dir("${value}") {
								def devStageDiff = sh (
									script: "git log origin/stage...origin/develop | grep -e '[A-Z]\\+-[0-9]\\+' -o | sort | uniq | awk '{print \$0}' ",
									returnStdout: true
								)
								echo "${value}: develop -> stage\n${devStageDiff}\n"
								if(devStageDiff!='') {
									description = description+ "${value}: develop -> stage\n${devStageDiff}\n"
								}

								def masterStageDiff = sh (
									script: "git log origin/master...origin/stage | grep -e '[A-Z]\\+-[0-9]\\+' -o | sort | uniq | awk '{print \$0}' ",
									returnStdout: true
								)
								echo "${value}: stage -> master\n${masterStageDiff}\n"
								if(masterStageDiff!='') {
									description = description + "${value}: stage -> master\n${masterStageDiff}\n"
								}
							}
						}

					} catch (exc) {}
					buildDescription description
					cleanWs()
				}
			}
		}
	}
}
