import groovy.transform.Field
@Field
def REPOSITORIES = ['core.toplyvo.app','toplyvotransporter','toplyvodesktop','toplyvosmsauth','insurance']

pipeline {
	agent { node { label 'master' } }
	options {
		skipDefaultCheckout true
	}
	stages {
		stage('Comparing branches') {
			steps {
				script {
					cleanWs()
					def teamsNotif = '';
					def teamsheader = "Current difference between branches<br/>";

					try {
						REPOSITORIES.each {value ->
							checkout([
								$class: 'GitSCM',
								branches: [[name: '*/stage']],
								doGenerateSubmoduleConfigurations: false,
								extensions: [[
									$class: 'RelativeTargetDirectory',
									relativeTargetDir: "${value}"
								]],
								submoduleCfg: [],
								userRemoteConfigs: [[
									credentialsId: '7303d04c-541b-49a3-83f2-834b64810cc5',
									url: "git@github.com:transloyd/${value}.git"
								]]
							])
							dir("${value}") {
								//---------------- teams ----------------
								devStageDiff = sh (
									script: "git log origin/stage...origin/develop | grep -e '[A-Z]\\+-[0-9]\\+' -o | sort | uniq | awk '{print \$0\"<br/>\"}' ",
									returnStdout: true
								)
								if(devStageDiff!='') {
									teamsNotif = teamsNotif+ "${value}: develop -> stage<br/>${devStageDiff}<br/>"
								}
								masterStageDiff = sh (
									script: "git log origin/master...origin/stage | grep -e '[A-Z]\\+-[0-9]\\+' -o | sort | uniq | awk '{print \$0\"<br/>\"}' ",
									returnStdout: true
								)
								if(masterStageDiff!='') {
									teamsNotif = teamsNotif + "${value}: stage -> master<br/>${masterStageDiff}<br/>"
								}
							}
						}

					} catch (exc) {}

					if(teamsNotif!='') {
						def text = teamsheader + teamsNotif
						try {
						sh "curl -H 'Content-Type: application/json' -d '{\"text\": \"${text}\"}' https://outlook.office.com/webhook/48bc9880-4b14-45b3-9ee3-93d0be4bd4f1@ef26001e-365b-4295-8511-2417ac86a68b/IncomingWebhook/662cfe3708cc4d769f4e5b268e9696c7/01797945-d308-43e9-b9c8-d9ed3f116bcf"
						} catch (exc) {
							buildDescription "\nCouldn't send to channel.\nRepeat later"
						}
					}
					cleanWs()
				}
			}
		}
	}
}
