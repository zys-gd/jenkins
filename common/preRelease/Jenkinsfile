// Create pre-release to stage
pipeline {
	agent any

	stages {

		stage ('Checkout stage') {

			steps {
				script {
					try {
						checkout([
							$class: 'GitSCM',
							branches: [[name: '*/stage']],
							doGenerateSubmoduleConfigurations: false,
							extensions: [[
								$class: 'RelativeTargetDirectory'
							]],
							submoduleCfg: [],
							userRemoteConfigs: [[
								credentialsId: '7303d04c-541b-49a3-83f2-834b64810cc5',
								url: "git@github.com:transloyd/${env.Repository}.git"
							]]
						])

						sh "git branch -v"
					}
					catch (exc) {
						echo exc
						currentBuild.result = 'FAILURE'
						currentStage.result = 'FAILURE'
					}
				}

			}
		}

		stage ('Check tag') {
			steps {
				script {
					try {
						sshagent(['7303d04c-541b-49a3-83f2-834b64810cc5']) {
							sh "git config --global user.email 'develop@toplyvo.app'"
                            sh "git config --global user.name 'Jenkins'"

							sh "git fetch --tags"

							def isGitTagExists = sh(returnStdout: true, script: "git tag -l 'v${env.Release}'").trim()

							if (isGitTagExists) {
								echo "Tag v${env.Release} is already exists"
								error("Tag v${env.Release} is already exists")
							}
                        }
					}
					catch (exc) {
						echo exc
						currentBuild.result = 'FAILURE'
						currentStage.result = 'FAILURE'
					}

				}
			}
		}

		stage ('Make pre-release') {
			steps {

				script {
					try {
						sshagent(['7303d04c-541b-49a3-83f2-834b64810cc5']) {
							sh "git config --global user.email 'develop@toplyvo.app'"
                            sh "git config --global user.name 'Jenkins'"

                            sh "git tag -a v${env.Release} -m 'Automated Jenkins build #${env.BUILD_ID}'"
							sh "git push --progress origin stage --tags"

							sh "git merge origin/develop --no-ff -m 'Automated pre-release ${env.Release}. ${env.BUILD_URL}'"
							sh "git push --progress origin stage --tags"
                        }
					}
					catch (exc) {
						echo exc
						sh "git status"
						currentBuild.result = 'FAILURE'
						currentStage.result = 'FAILURE'
					}

				}

			}
		}

	}

}