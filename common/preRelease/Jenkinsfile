// Create pre-release to stage
def VERSION_TAG = "v${env.Release}-rc${env.BUILD_ID}"
pipeline {
	agent any
	options {
		skipDefaultCheckout true
	}
	stages {

		stage ('Checkout stage') {

			steps {

				buildDescription "${VERSION_TAG}"
				script {
					try {
						sh "rm -R *"
						sshagent(['7303d04c-541b-49a3-83f2-834b64810cc5']) {
							sh "git config --global user.email 'develop@toplyvo.app'"
                            sh "git config --global user.name 'Jenkins'"
							sh "git clone git@github.com:transloyd/${env.Repository}.git"
						}

						dir("${env.Repository}") {
							sh "git checkout stage"
						}
					}
					catch (exc) {
						currentBuild.result = 'FAILURE'
						currentStage.result = 'FAILURE'
					}
				}

			}
		}

		stage ('Check tag') {
			steps {
				script {
					try {
						dir("${env.Repository}") {
							sshagent(['7303d04c-541b-49a3-83f2-834b64810cc5']) {
								sh "git fetch --tags"

								def isGitTagExists = sh(returnStdout: true, script: "git tag -l '${VERSION_TAG}'").trim()

								if (isGitTagExists) {
									echo "Tag ${VERSION_TAG} is already exists"
									error("Tag ${VERSION_TAG} is already exists")
								}
	                        }
                        }
					}
					catch (exc) {
						currentBuild.result = 'FAILURE'
						currentStage.result = 'FAILURE'
					}

				}
			}
		}

		stage ('Make pre-release merge') {
			steps {

				script {
					try {
						dir("${env.Repository}") {
							sshagent(['7303d04c-541b-49a3-83f2-834b64810cc5']) {
								sh "git merge origin/develop --no-ff -m 'Automated pre-release ${VERSION_TAG}. ${env.BUILD_URL}'"

	                            sh "git tag -a ${VERSION_TAG} -m 'Automated Jenkins build #${env.BUILD_ID}'"
								sh "git push --progress origin stage"
								sh "git push --progress origin stage --tags"
	                        }
                        }
					}
					catch (exc) {
						sh "git status"
						currentBuild.result = 'FAILURE'
						currentStage.result = 'FAILURE'
					}

				}

			}
		}

	}

}

node {
	properties([
        parameters(
            string(name: "Release", defaultValue: VERSION_TAG, description: ''),
        )
    ])
}