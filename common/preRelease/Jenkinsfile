import groovy.transform.Field
@Field
def Dev = [id:'10107']
@Field
def Stage = [id:'10108']
@Field
def Prod = [id:'10109']
@Field
def Local = [id:'10106']

// Create pre-release to stage
def VERSION_TAG = "rc${env.Release}-${env.BUILD_ID}"
def devStageDiff = '';
def logs = '';
pipeline {
	agent any
	options {
		skipDefaultCheckout true
	}
	parameters{
		string(name: "Release", defaultValue: Release, description: '')
	}
	stages {

		stage ('Checkout stage') {

			steps {

				buildDescription "${env.Repository}\n${VERSION_TAG}"
				script {
					try {
						sh "rm -R *"
						sshagent(['7303d04c-541b-49a3-83f2-834b64810cc5']) {
							sh "git config --global user.email 'develop@toplyvo.app'"
                            sh "git config --global user.name 'Jenkins'"
							sh "git clone git@github.com:transloyd/${env.Repository}.git"
						}

						dir("${env.Repository}") {
							sh "git checkout stage"
						}
					}
					catch (exc) {
						currentBuild.result = 'FAILURE'
					}
				}

			}
		}

		stage ('Make pre-release merge') {
			steps {

				script {
					try {
						dir("${env.Repository}") {
							devStageDiff = sh (
								script: "git log origin/stage...origin/develop | grep -e '[A-Z]\\+-[0-9]\\+' -o | sort | uniq | awk '{print \$0\"<br/>\"}' ",
								returnStdout: true
							)
							logs = sh (
                                script: "git log origin/stage...origin/develop | grep -e '[A-Z]\\+-[0-9]\\+' -o | sort | uniq | awk '{print \$0}' ",
                                returnStdout: true
                            ).split( '\n' )
                            echo "DEBUG: logs"
                            println logs

							sshagent(['7303d04c-541b-49a3-83f2-834b64810cc5']) {
								sh "git merge origin/develop --no-ff -m 'Automated pre-release. ${env.BUILD_URL}'"
								sh "git push --progress origin stage"
	                        }
                        }
					}
					catch (exc) {
						echo 'DEBUG: PUSHING error'
						currentBuild.result = 'FAILURE'
					}

					if(devStageDiff!='') {
						def teamsNotif = "${env.Repository}: MERGED develop -> stage<br/>${devStageDiff}<br/>"
						withCredentials([string(credentialsId: 'teams_channel_dev_team', variable: 'URL')]) {
							try {
								sh 'curl --retry 5 -H \'Content-Type: application/json\' -d \'{"text": "'+teamsNotif+'"}\' $URL'
							} catch (e){
								echo 'DEBUG: TEAMS sending error'
							}
						}
					}
				}

			}
		}

		stage('Set Jira env') {
			steps {
				script {
					echo "DEBUG: logs"
					logs.each {value ->
						def issueEnv = [fields: [customfield_10049: Stage]]
						echo value
                        jiraEditIssue idOrKey: value, issue: issueEnv, site: 'Jira Toplyvo'
                    }
				}
			}
		}

	}

}
