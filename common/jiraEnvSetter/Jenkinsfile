import groovy.transform.Field
@Field
def Dev = [id:'10107']
@Field
def Stage = [id:'10108']
@Field
def Prod = [id:'10109']
@Field
def Local = [id:'10106']
@Field
def issueID = ''

//def jsonObj = readJSON text: "${HEAD_COMMIT}"

@NonCPS
def extractIssueID()
{
	return ("${COMMIT_MESSAGE}" =~ /(TPLV-\d{1,})/)[0][1]
}

@NonCPS
def ensureMerged()
{
	return ("${COMMIT_MESSAGE}" =~ /.*Merge pull request*/).find()
}

def getEnvironment()
{

	def env = [];
	switch(BRANCH_FULL_PATH) {
		case 'refs/heads/develop':
			env = ['DEV', Dev];
			break;
		case 'refs/heads/stage':
            env = ['STAGE', Stage];
            break;
		case 'refs/heads/master':
            env = ['PROD', Prod];
            break;
		default:
			env = ['LOCAL', Local];
			break;
	}

	return env
}

def setTaskEnv(issueID, state, isLocal = 0)
{
	def issueEnv = [fields: [customfield_10049: state]]
	if(isLocal) {
		issueEnv << [fields: [assignee: [accountId:'5f23c383ef11df0025a5b003']]]
	}
	jiraEditIssue idOrKey: issueID, issue: issueEnv, site: 'Jira Toplyvo'
}

def getJiraIssue(issueID)
{
	def objIssue = jiraGetIssue idOrKey: issueID, site: 'Jira Toplyvo'
	return objIssue
}

node ('master') {
	cleanWs()
	echo "Repository " + "${REPOSITORY_NAME}"
	echo "Branch " + "${BRANCH_FULL_PATH}"

	try {
		issueID = extractIssueID()
		buildName "${issueID} in ${REPOSITORY_NAME}"
		buildDescription "Checking for ${issueID}"
	} catch (exc) {
        buildName "${REPOSITORY_NAME}"
        buildDescription "${COMMIT_MESSAGE}\nSomething went wrong"
    }

	def env = getEnvironment()
	def objIssue = getJiraIssue(issueID)

	if(ensureMerged()) {
	    setTaskEnv(issueID, env[1])
	    echo "Update issue " + issueID + " from repository " + "${REPOSITORY_NAME}"

	    gitHubPRStatus githubPRMessage('Set Jira issue ENV to ' + env[0])
	    def jobDesc = "Set Jira issue ${issueID} ENV to " + env[0]
	    buildDescription jobDesc

		try {
			sshagent(['7303d04c-541b-49a3-83f2-834b64810cc5']) {
				sh "git config --global user.email 'develop@toplyvo.app'"
                sh "git config --global user.name 'Jenkins'"
				sh "git clone git@github.com:transloyd/${REPOSITORY_NAME}.git ${issueID}"
			}
			dir("${issueID}") {
			    sshagent(['7303d04c-541b-49a3-83f2-834b64810cc5']) {
			        sh "git push --progress --porcelain origin :${issueID}"
			    }
			}
		} catch (exc) {
			jobDesc = jobDesc + "\nError while deleting branch"
			buildDescription jobDesc
		}

		try {
			withCredentials([string(credentialsId: 'teams_channel_dev_team', variable: 'URL')]) {
				def text = "${REPOSITORY_NAME}: ${issueID} -> " + env[0]
				sh 'curl --retry 5 -H \'Content-Type: application/json\' -d \'{"text": "'+text+'"}\' $URL'
			}
		} catch (exc) {
			jobDesc = jobDesc + "\nError while sending to teams"
            buildDescription jobDesc
		}

	} else if(env[0] == 'LOCAL' && (objIssue.data.fields.customfield_10049 == null || objIssue.data.fields.customfield_10049.id != 10106)) {
		setTaskEnv(issueID, env[1], 1)
		buildDescription "LOCAL"
	}
	cleanWs()
}
