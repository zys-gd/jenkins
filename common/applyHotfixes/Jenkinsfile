// Apply hotfixes from master to stage and develop branches
pipeline {
	agent any
	options {
		skipDefaultCheckout true
	}
	stages {

		stage ('Checkout hotfix') {

			steps {

				script {
					buildDescription "${env.Repository}"
					try {
						sh "rm -R *"
						sshagent(['7303d04c-541b-49a3-83f2-834b64810cc5']) {
							sh "git config --global user.email 'develop@toplyvo.app'"
                            sh "git config --global user.name 'Jenkins'"
							sh "git clone git@github.com:transloyd/${env.Repository}.git"
						}

						dir("${env.Repository}") {
							sh "git checkout hotfix"
						}

					}
					catch (exc) {
						currentBuild.result = 'FAILURE'
					}
				}

			}
		}

		stage ('Update master') {
        			steps {

        				script {
        					try {
        						dir("${env.Repository}") {
        							sshagent(['7303d04c-541b-49a3-83f2-834b64810cc5']) {
        								sh "git checkout master"
        								sh "git pull"
        								sh "git merge origin/hotfix --no-ff -m 'Automated merge hotfix branch to master. ${env.BUILD_URL}'"
        								sh "git push --progress origin master"
        	                        }
                                }
        					}
        					catch (exc) {
        						sh "git status"
        						currentBuild.result = 'FAILURE'
        					}

        				}

        			}
        		}

		stage ('Update stage') {
			steps {

				script {
					try {
						dir("${env.Repository}") {
							sshagent(['7303d04c-541b-49a3-83f2-834b64810cc5']) {
								sh "git checkout stage"
								sh "git pull"
								sh "git merge origin/master --no-ff -m 'Automated merge master branch to stage. ${env.BUILD_URL}'"
								sh "git push --progress origin stage"
	                        }
                        }
					}
					catch (exc) {
						sh "git status"
						currentBuild.result = 'FAILURE'
					}

				}

			}
		}

		stage ('Update develop') {
            steps {

                script {
                    try {
                        dir("${env.Repository}") {
                            sh "git remote -v"
	                        sshagent(['7303d04c-541b-49a3-83f2-834b64810cc5']) {
		                        sh "git checkout develop"
		                        sh "git pull"
	                            sh "git merge origin/stage --no-ff -m 'Automated merge stage branch to develop. ${env.BUILD_URL}'"
	                            sh "git push --progress origin develop"
	                        }
                        }
                    }
                    catch (exc) {
                        sh "git status"
                        currentBuild.result = 'FAILURE'
                    }

                }

            }
        }

	}

}
