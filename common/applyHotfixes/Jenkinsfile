// Apply hotfixes from master to stage and develop branches
pipeline {
	agent any

	stages {

		stage ('Checkout master') {

			steps {

				script {
					try {
						checkout([
							$class: 'GitSCM',
							branches: [[name: '*/master']],
							doGenerateSubmoduleConfigurations: false,
							extensions: [],
							submoduleCfg: [],
							userRemoteConfigs: [[
								credentialsId: '7303d04c-541b-49a3-83f2-834b64810cc5',
								url: "git@github.com:transloyd/${env.Repository}.git"
							]]
						])

						sh "git branch -v"
						sh "git remote -v"
						sh "git status"
						sh "git checkout master"
						sh "git pull"
					}
					catch (exc) {
						echo exc
						currentBuild.result = 'FAILURE'
						currentStage.result = 'FAILURE'
					}
				}

			}
		}

		stage ('Update stage') {
			steps {

				script {
					try {
						dir("${env.Repository}") {
							sshagent(['7303d04c-541b-49a3-83f2-834b64810cc5']) {
								sh "git config --global user.email 'develop@toplyvo.app'"
	                            sh "git config --global user.name 'Jenkins'"
								sh "git checkout stage"
								sh "git pull"
								//def result = sh(returnStdout: true, script: 'git merge origin/master --no-commit').trim()
								//if(result != 'Already up to date.') {
								//	sh "git commit --author 'Jenkins <develop@toplyvo.app>' -m 'Automated merge master branch to stage. ${env.BUILD_URL}'"
								//}
								sh "git merge origin/master --no-ff -m 'Automated merge master branch to stage. ${env.BUILD_URL}'"
								sh "git push --progress origin stage"
	                        }
                        }
					}
					catch (exc) {
						echo exc
						sh "git status"
						currentBuild.result = 'FAILURE'
						currentStage.result = 'FAILURE'
					}

				}

			}
		}

		stage ('Update develop') {
            steps {

                script {
                    try {
                        dir("${env.Repository}") {
                            sh "git remote -v"
	                        sshagent(['7303d04c-541b-49a3-83f2-834b64810cc5']) {
								sh "git config --global user.email 'develop@toplyvo.app'"
	                            sh "git config --global user.name 'Jenkins'"
		                        sh "git checkout develop"
		                        sh "git pull"
		                        //def result = sh(returnStdout: true, script: 'git merge origin/stage --no-commit').trim()
	                            //if(result != 'Already up to date.') {
	                            //    sh "git commit --author 'Jenkins <develop@toplyvo.app>' -m 'Automated merge stage branch to develop. ${env.BUILD_URL}' || true"
	                            //}
	                            sh "git merge origin/master --no-ff -m 'Automated merge stage branch to develop. ${env.BUILD_URL}'"
	                            sh "git push --progress origin develop"
	                        }
                        }
                    }
                    catch (exc) {
                        echo exc
                        sh "git status"
                        currentBuild.result = 'FAILURE'
                        currentStage.result = 'FAILURE'
                    }

                }

            }
        }

	}

}