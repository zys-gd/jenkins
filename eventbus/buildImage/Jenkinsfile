pipeline {
	agent { node { label 'master' } }
	options {
		skipDefaultCheckout true
	}
	environment {
		DOCKER_USERNAME='jenkins'
        DOCKER_PASSWORD='ch1qySOXu8Q'
        DOCKER_REGISTRY='registry.digitalocean.com/jf-toplyvo'
        DOCKER_IMAGE_SUFFIX='prod'
    }
	parameters {
        gitParameter name: 'TAG',
                     type: 'PT_TAG',
                     defaultValue: 'v1.0.0',
                     description: 'Tag og docker image\'s build',
                     quickFilterEnabled: true,
                     sortMode: 'DESCENDING_SMART',
                     useRepository: 'git@github.com:transloyd/eventbus.git'

    }
	stages {

		stage ('Checkout from git') {

			steps {
				script {
					buildDescription "${params.TAG}"
					try {
						checkout([
							$class: 'GitSCM',
							branches: [[name: "refs/tags/${params.TAG}"]],
							doGenerateSubmoduleConfigurations: false,
							extensions: [],
							submoduleCfg: [],
							userRemoteConfigs: [[
								credentialsId: '7303d04c-541b-49a3-83f2-834b64810cc5',
								url: 'git@github.com:transloyd/eventbus.git'
							]]
						])
					}
					catch (exc) {
						currentBuild.result = 'FAILURE'
					}
				}
			}
		}

		stage ('Login to Registry') {
			steps {
				script {
	                //sh "docker login $DOCKER_REGISTRY -u=$DOCKER_USERNAME -p=$DOCKER_PASSWORD"
	                sh "doctl registry login"
                }

			}
		}

		stage ('Remove previous builds') {
			steps {
				script {
	                def previousBuild = currentBuild.getPreviousBuild().getRawBuild().actions.find{ it instanceof ParametersAction }?.parameters.find{it.name == 'TAG'}?.value
					try {
                        sh "cat docker rmi -f \$(docker images -q --filter 'before=${DOCKER_REGISTRY}/eventbus-app-${DOCKER_IMAGE_SUFFIX}:${previousBuild}' --filter=reference='${DOCKER_REGISTRY}/*')"
                        sh "docker rmi -f \$(docker images -q --filter 'before=${DOCKER_REGISTRY}/eventbus-app-${DOCKER_IMAGE_SUFFIX}:${previousBuild}' --filter=reference='${DOCKER_REGISTRY}/*')"
					} catch (exc) {}
                }

			}
		}

		stage ('Build app image') {
			steps {
				script {
					sh "cp .docker/build/docker-compose.yml docker-compose.yml"
					sh "docker-compose build node-app-image"
					sh "docker tag $DOCKER_REGISTRY/eventbus-app-prod $DOCKER_REGISTRY/eventbus-app-prod"
					sh "docker push $DOCKER_REGISTRY/eventbus-app-prod"
				}
			}
		}

		stage ('Logout from Registry') {
			steps {
				script {
	                //sh "docker logout $DOCKER_REGISTRY"
	                sh "doctl registry logout"
                }

			}
		}

	}
}
