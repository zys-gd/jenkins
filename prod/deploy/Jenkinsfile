pipeline {
	agent { node { label 'toplivo-production-ssh' } }
	environment {
		def DOCKER_USERNAME='jenkins'
        def DOCKER_PASSWORD='ch1qySOXu8Q'
        def DOCKER_REGISTRY='jf-dev.toplyvo.app'
    }
	parameters {
        gitParameter name: 'TAG',
                     type: 'PT_TAG',
                     defaultValue: 'v2.0.0',
                     description: 'Tag og docker image\'s build',
                     quickFilterEnabled: true,
                     sortMode: 'DESCENDING_SMART',
                     useRepository: 'git@github.com:transloyd/core.toplyvo.app.git'

    }
	stages {

		stage ('Checkout from git') {
			steps {
				node ('master') {
					dir ("/var/lib/jenkins/workspace/'Test prod build image'") {
						sh 'ls -la'
						stash name: "docker", includes: "docker/*"
					}
				}
				node ('toplivo-production-ssh') {
					dir ("/home/jenkins/workspace/'Test prod deploy from registry'") {
						sh 'rm -R *'
						unstash "docker"
					}
				}
			}
		}

		stage ('Login to Registry') {
			steps {
				script {
	                sh "docker login $DOCKER_REGISTRY -u=$DOCKER_USERNAME -p=$DOCKER_PASSWORD"
                }

			}
		}

		stage ('Apply builds') {
			environment {
				IMAGE_TAG="${params.TAG}"
			}
			steps {
				script {
					try {
						sh "rm -R environments"
					} catch (exc) {}

					sshagent(['7303d04c-541b-49a3-83f2-834b64810cc5']) {
						sh "git clone git@github.com:transloyd/environments.git"
					}

					sh "cp docker/build/docker-compose.prod.yml docker-compose.yml"

					sh "cp environments/b2c/.env .env"

					sh "docker pull jf-dev.toplyvo.app/prod_toplyvo_php_fpm:${params.TAG}"
					sh "docker pull jf-dev.toplyvo.app/prod_toplyvo_php_consumer:${params.TAG}"
					sh "docker pull jf-dev.toplyvo.app/prod_toplyvo_php_cli:${params.TAG}"
					sh "docker pull jf-dev.toplyvo.app/prod_toplyvo_nginx:${params.TAG}"
/*
					sh "docker-compose up -d --force-recreate php_cli"
					sh "docker-compose run php_cli php bin/console --configuration=./app/config/doctrine/migrations.yml doctrine:migrations:migrate --env=prod"

					sh "docker-compose up -d --remove-orphans"
*/
				}
			}
		}

		stage ('Logout from Registry') {
			steps {
				script {
	                sh "docker logout $DOCKER_REGISTRY"
                }

			}
		}

	}
}