pipeline {
	agent { node { label 'master' } }
	options {
		skipDefaultCheckout true
	}
	environment {
		DOCKER_USERNAME='jenkins'
        DOCKER_PASSWORD='ch1qySOXu8Q'
        //DOCKER_REGISTRY='jf-dev.toplyvo.app'
        DOCKER_REGISTRY='registry.digitalocean.com/jf-toplyvo'
    }
	parameters {
        gitParameter name: 'TAG',
                     type: 'PT_TAG',
                     defaultValue: 'v2.0.0',
                     description: 'Tag og docker image\'s build',
                     quickFilterEnabled: true,
                     sortMode: 'DESCENDING_SMART',
                     useRepository: 'git@github.com:transloyd/core.toplyvo.app.git'

    }
	stages {

		stage ('Checkout from git') {

			steps {
				script {
					sh "printenv"
					sh "ls /usr/bin"
					buildDescription "${params.TAG}"
					try {
						checkout([
							$class: 'GitSCM',
							branches: [[name: "refs/tags/${params.TAG}"]],
							doGenerateSubmoduleConfigurations: false,
							extensions: [],
							submoduleCfg: [],
							userRemoteConfigs: [[
								credentialsId: '7303d04c-541b-49a3-83f2-834b64810cc5',
								url: 'git@github.com:transloyd/core.toplyvo.app.git'
							]]
						])
					}
					catch (exc) {
						currentBuild.result = 'FAILURE'
						currentStage.result = 'FAILURE'
					}
				}
			}
		}

		stage ('Login to Registry') {
			steps {
				script {
	                //sh "docker login $DOCKER_REGISTRY -u=$DOCKER_USERNAME -p=$DOCKER_PASSWORD"
	                sh "doctl registry login"
                }

			}
		}

		stage ('Remove previous builds') {
			steps {
				script {
	                def previousBuild = currentBuild.getPreviousBuild().getRawBuild().actions.find{ it instanceof ParametersAction }?.parameters.find{it.name == 'TAG'}?.value
					try {
                        sh "docker rmi -f \$(docker images -q --filter 'before=${DOCKER_REGISTRY}/prod_toplyvo_php_fpm:${previousBuild}' --filter=reference='${DOCKER_REGISTRY}/*')"
					} catch (exc) {}
                }

			}
		}

		stage ('Build pure php image') {
			steps {
				script {
					try {
						sh "rm -R environments"
					} catch (exc) {}

					sshagent(['7303d04c-541b-49a3-83f2-834b64810cc5']) {
						sh "git clone git@github.com:transloyd/environments.git"
					}

					sh "cp docker/build/docker-compose.prod_build.yml docker-compose.yml"

					sh "cp .env.dev .env"

					sh "docker-compose build --parallel php-fpm-image php-cli-image"

					sh "docker tag $DOCKER_REGISTRY/php-fpm-image $DOCKER_REGISTRY/php-fpm-image"
					sh "docker push $DOCKER_REGISTRY/php-fpm-image"

					sh "docker tag $DOCKER_REGISTRY/php-cli-image $DOCKER_REGISTRY/php-cli-image"
					sh "docker push $DOCKER_REGISTRY/php-cli-image"
				}
			}
		}

		stage ('PHP preparations') {
			steps {
				script {
					def reqDirs = "var/cache var/logs var/spool var/sessions web/public/img/uploads"
					def envs = "-e REDIS_HOST=test_toplivo_back_redis -e RABBITMQ_HOST=test_toplyvo_rabbitmq -e DATABASE_HOST=test_toplyvo_mysql -e SHELL_DATABASE_HOST='' -e SHELL_DATABASE_PORT=''"
	                sh "docker-compose down"
	                sh "docker-compose up -d composer redis rabbitmq mysql"
	                sh "docker-compose exec -T composer composer install --no-scripts --no-dev"
	                sh "docker-compose exec -T composer mkdir -p ${reqDirs}"
	                sh "docker-compose run --rm ${envs} -T composer php bin/console cache:clear --env=prod"
	                sh "docker-compose run --rm ${envs} -T composer php bin/console cache:warmup --env=prod"
	                sh "docker-compose run --rm ${envs} -T composer php bin/console assets:install --env=prod"
	                sh "docker-compose down"
                }

			}
		}

		stage ('Build production php') {
			steps {
				script {
	                sh "docker-compose build --parallel --no-cache php-fpm php-cron php-consumer"

	                sh "docker tag $DOCKER_REGISTRY/prod_toplyvo_php_fpm $DOCKER_REGISTRY/prod_toplyvo_php_fpm"
	                sh "docker tag $DOCKER_REGISTRY/prod_toplyvo_php_fpm $DOCKER_REGISTRY/prod_toplyvo_php_fpm:${params.TAG}"
                    sh "docker push $DOCKER_REGISTRY/prod_toplyvo_php_fpm"

                    sh "docker tag $DOCKER_REGISTRY/prod_toplyvo_php_cron $DOCKER_REGISTRY/prod_toplyvo_php_cron"
                    sh "docker tag $DOCKER_REGISTRY/prod_toplyvo_php_cron $DOCKER_REGISTRY/prod_toplyvo_php_cron:${params.TAG}"
                    sh "docker push $DOCKER_REGISTRY/prod_toplyvo_php_cron"

                    sh "docker tag $DOCKER_REGISTRY/prod_toplyvo_php_consumer $DOCKER_REGISTRY/prod_toplyvo_php_consumer"
                    sh "docker tag $DOCKER_REGISTRY/prod_toplyvo_php_consumer $DOCKER_REGISTRY/prod_toplyvo_php_consumer:${params.TAG}"
                    sh "docker push $DOCKER_REGISTRY/prod_toplyvo_php_consumer"
                }

			}
		}

		stage ('Build production nginx') {
			steps {
				script {
	                sh "docker-compose build nginx"
	                sh "docker tag $DOCKER_REGISTRY/prod_toplyvo_nginx $DOCKER_REGISTRY/prod_toplyvo_nginx"
	                sh "docker tag $DOCKER_REGISTRY/prod_toplyvo_nginx $DOCKER_REGISTRY/prod_toplyvo_nginx:${params.TAG}"
	                sh "docker push $DOCKER_REGISTRY/prod_toplyvo_nginx"
                }

			}
		}

		stage ('Logout from Registry') {
			steps {
				script {
	                //sh "docker logout $DOCKER_REGISTRY"
	                sh "doctl registry logout"
                }

			}
		}

	}
}