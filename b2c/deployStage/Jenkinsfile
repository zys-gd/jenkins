/*node ('master') {
	dir ("/var/lib/jenkins/workspace/B2C image builder") {
		sh 'ls -la docker'
		stash name: "docker", includes: "docker/", allowEmpty: true
	}
}*/

pipeline {
	agent { node { label 'toplivo-stage' } }
	options {
		skipDefaultCheckout true
	}
	environment {
		DOCKER_USERNAME='jenkins'
        DOCKER_PASSWORD='ch1qySOXu8Q'
        DOCKER_REGISTRY='registry.digitalocean.com/jf-toplyvo'
    }

	stages {

// 		stage ('Get build configuration') {
// 			steps {
// 				buildDescription "${params.TAG}"
// 				script { try {
// 					// this checkout is needed for gitParameter plugin
// 					checkout([
// 						$class: 'GitSCM',
// 						branches: [[name: '*/master']],
// 						doGenerateSubmoduleConfigurations: false,
// 						extensions: [
// 							[$class: 'RelativeTargetDirectory', relativeTargetDir: 'source']
// 						],
// 						submoduleCfg: [],
// 						userRemoteConfigs: [[
// 							credentialsId: '7303d04c-541b-49a3-83f2-834b64810cc5',
// 							url: 'git@github.com:transloyd/core.toplyvo.app.git'
// 						]]
// 					])
// 					sh 'rm -rf docker environments || true'
// 					sh "cd source && mv docker ../"
// 					sh 'rm -rf source'
// 				} catch (exc) {}}
// 				//unstash "docker"
// 			}
// 		}

		stage ('Login to Registry') {
			steps {
				script {
					def specificCause = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')
					def user = specificCause ? specificCause.userName : '-'
                    buildDescription "Started by ${user}"
	                //sh "docker login $DOCKER_REGISTRY -u=$DOCKER_USERNAME -p=$DOCKER_PASSWORD"
	                sh "doctl registry login"
                }

			}
		}

		stage ('Remove previous builds') {
			steps {
				script {
					try {
                        sh "docker rmi -f \$(docker images -q --filter 'before=${DOCKER_REGISTRY}/stage_toplyvo_php_fpm --filter=reference='${DOCKER_REGISTRY}/*')"
					} catch (exc) {}
                }

			}
		}

		stage ('Download builds') {

			steps {
				script {
					sh "docker pull ${DOCKER_REGISTRY}/stage_toplyvo_php_fpm"
					sh "docker pull ${DOCKER_REGISTRY}/stage_toplyvo_php_consumer"
					sh "docker pull ${DOCKER_REGISTRY}/stage_toplyvo_php_cron"
					sh "docker pull ${DOCKER_REGISTRY}/stage_toplyvo_nginx"
				}
			}
		}

		stage ('Apply builds') {
			steps {
				script {
					sshagent(['7303d04c-541b-49a3-83f2-834b64810cc5']) {
						sh "git clone git@github.com:transloyd/environments.git"
					}

					sh "cp docker/build/docker-compose.stage.yml docker-compose.yml"

					sh "cp environments/b2c/.env.stage .env"

					sh "docker-compose up -d --force-recreate --remove-orphans"
                    sh "docker-compose exec -T php-cron php bin/console --configuration=./app/config/doctrine/migrations.yml doctrine:migrations:migrate --allow-no-migration --no-interaction --env=prod"
                    sh "docker-compose exec -T php-cron php bin/console --em=tracking  --configuration=./app/config/doctrine/tracking_migrations.yml doctrine:migrations:migrate --allow-no-migration --no-interaction --env=prod"

				}
			}
		}

		stage ('Logout from Registry') {
			steps {
				script {
	                //sh "docker logout $DOCKER_REGISTRY"
	                sh "doctl registry logout"
                }

			}
		}

	}
}
