// Build project when PR open
// Remove data when PR closed
def writeGitHubPullRequestStatus(text, state)
{
	setGitHubPullRequestStatus context: 'Jenkins', message: text, state: state
}

writeGitHubPullRequestStatus('Job started', 'PENDING')
buildDescription "${GITHUB_PR_SOURCE_BRANCH}"

pipeline {
	agent { node { label 'master'} }
	options {
		skipDefaultCheckout true
	}
	stages {

		stage ('Checkout from git') {
			when {
				expression { "${GITHUB_PR_STATE}" == 'OPEN' }
			}
			steps {
				writeGitHubPullRequestStatus("${env.STAGE_NAME}", 'PENDING')

				dir("${GITHUB_PR_SOURCE_BRANCH}") {
					sh "docker-compose down"
				}
				//sh "rm -R ${GITHUB_PR_SOURCE_BRANCH}/"

				checkout([
					$class: 'GitSCM',
					branches: [[name: '*/${GITHUB_PR_SOURCE_BRANCH}']],
					doGenerateSubmoduleConfigurations: false,
					extensions: [[
						$class: 'RelativeTargetDirectory',
						relativeTargetDir: '${GITHUB_PR_SOURCE_BRANCH}'
					]],
					submoduleCfg: [],
					userRemoteConfigs: [[
						credentialsId: '7303d04c-541b-49a3-83f2-834b64810cc5',
						url: 'git@github.com:transloyd/core.toplyvo.app.git'
					]]
				])

			}
		}

		stage ('Prepare environment') {
			when {
				expression { "${GITHUB_PR_STATE}" == 'OPEN' }
			}
			steps {
				writeGitHubPullRequestStatus("${env.STAGE_NAME}", 'PENDING')
				dir("${GITHUB_PR_SOURCE_BRANCH}") {
					sh "cp .env.dev .env"
					sh "cat .env.docker >> .env"
					sh "cp docker/build/docker-compose.jenkins.yml docker-compose.yml"
				}
			}
		}

		stage ('Run docker-compose') {
			environment {
				DOCKER_PREFIX="${GITHUB_PR_SOURCE_BRANCH}"
				CONTAINER_NAME_PREFIX="${GITHUB_PR_SOURCE_BRANCH}"
				COMPOSE_INTERACTIVE_NO_CLI=1
				REDIS_HOST="${GITHUB_PR_SOURCE_BRANCH}_toplivo_back_redis"
				MYSQL_DATABASE_HOST="${GITHUB_PR_SOURCE_BRANCH}_toplivo_back_mysql"
				TRACKING_DATABASE_USER="root"
				TRACKING_DATABASE_PASSWORD="root123456"
			}
			when {
				expression { "${GITHUB_PR_STATE}" == 'OPEN' }
			}
			steps {
				writeGitHubPullRequestStatus("${env.STAGE_NAME}", 'PENDING')
				dir("${GITHUB_PR_SOURCE_BRANCH}") {
					script {
						try {
							sh "cp ./docker/php/parameters.yml.dist app/config/parameters.yml"
							sh "docker-compose up -d --build --force-recreate"
						}
						catch (exc) {
							sh "docker-compose down"
							currentBuild.result = 'FAILURE'
							currentStage.result = 'FAILURE'
						}

						try {
							sh "docker-compose exec -T php php bin/console doctrine:database:create --connection=tracking"
						}
						catch (exc) {
							echo "DB tracking already exist"
						}

						try {
							sh "docker-compose exec -T php composer install"

							sh "docker-compose exec -T php php bin/console --configuration=./app/config/doctrine/migrations.yml doctrine:migrations:migrate --allow-no-migration --no-interaction --no-debug"
							sh "docker-compose exec -T php php bin/console --em=tracking --configuration=./app/config/doctrine/tracking_migrations.yml doctrine:migrations:migrate --allow-no-migration --no-interaction --no-debug"

				            sh "docker-compose exec -T php php bin/console cache:clear"
				            sh "docker-compose exec -T php php bin/console cache:warmup --env=dev"
				            sh "docker-compose exec -T php php bin/console doctrine:cache:clear-metadata --env=dev"

							sh "chown -R www-data:www-data var/ web/"
							sh "docker-compose stop php_consumer"
							sh "docker-compose run -w /var/www/html --rm php_consumer bin/console rabbitmq-supervisor:rebuild"
							sh "docker-compose start php_consumer"

							sh "docker-compose exec -T php_cli bash /entrypoint.sh"
							sh "docker-compose exec -T php php /var/www/html/bin/console assets:install --symlink"

						}
						catch (exc) {
							sh "docker-compose down"
							currentBuild.result = 'FAILURE'
							currentStage.result = 'FAILURE'
						}


					}
				}
			}
		}


		stage ('Close PR: stop docker')
		{
			when {
				expression { "${GITHUB_PR_STATE}" == 'CLOSED' }
			}
			steps
			{
				writeGitHubPullRequestStatus("${env.STAGE_NAME}", 'PENDING')
				dir("${GITHUB_PR_SOURCE_BRANCH}") {
					sh 'docker-compose down'
				}
			}
		}

		stage ('Close PR: remove directory')
		{
			when {
				expression { "${GITHUB_PR_STATE}" == 'CLOSED' }
			}
			steps
			{
				writeGitHubPullRequestStatus("${env.STAGE_NAME}", 'PENDING')
				sh "rm -R ${GITHUB_PR_SOURCE_BRANCH}"
			}
		}


	}

	post {
      success {
          writeGitHubPullRequestStatus("Job finished", 'SUCCESS')
          //gitHubPRStatus githubPRMessage('${env.STAGE_NAME}')
      }
      failure {
          writeGitHubPullRequestStatus("Job finished", 'FAILURE')
      }
    }
}