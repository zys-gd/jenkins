// Build project when PR open
// Remove data when PR closed
def writeGitHubPullRequestStatus(text, state)
{
	setGitHubPullRequestStatus context: 'Jenkins', message: text, state: state
}

writeGitHubPullRequestStatus('Job started', 'PENDING')

pipeline {
	agent { node { label 'toplivo-dev-ssh'} }
	options {
		skipDefaultCheckout true
	}
	environment {
		DOCKER_PREFIX="${GITHUB_PR_SOURCE_BRANCH}"
		CONTAINER_NAME_PREFIX="${GITHUB_PR_SOURCE_BRANCH}."
		COMPOSE_INTERACTIVE_NO_CLI=1
		MYSQL_PORT="${GITHUB_PR_NUMBER}"
	}
	stages {

		stage ('Checkout from git') {
			when {
				expression { "${GITHUB_PR_STATE}" == 'OPEN' }
			}
			steps {
				writeGitHubPullRequestStatus("${env.STAGE_NAME}", 'PENDING')
				buildDescription "${GITHUB_PR_SOURCE_BRANCH}"

				script {
					dir("${GITHUB_PR_SOURCE_BRANCH}") {
						try {
							sh "docker-compose run --rm php ls -la /var/www/html/*"
							sh "docker-compose run --rm php rm -rf /var/www/html/*"
							sh "docker-compose down"
						}
						catch (exc) {}
						deleteDir()
					}
				}

				script { try {
					checkout([
						$class: 'GitSCM',
						branches: [[name: '*/${GITHUB_PR_SOURCE_BRANCH}']],
						doGenerateSubmoduleConfigurations: false,
						extensions: [[
							$class: 'RelativeTargetDirectory',
							relativeTargetDir: '${GITHUB_PR_SOURCE_BRANCH}'
						]],
						submoduleCfg: [],
						userRemoteConfigs: [[
							credentialsId: '7303d04c-541b-49a3-83f2-834b64810cc5',
							url: 'git@github.com:transloyd/core.toplyvo.app.git'
						]]
					])
				}
                catch (exc) {
                    echo exc
                    currentBuild.result = 'FAILURE'
                }}

			}
		}

		stage ('Prepare environment') {
			when {
				expression { "${GITHUB_PR_STATE}" == 'OPEN' }
			}
			steps {
				writeGitHubPullRequestStatus("${env.STAGE_NAME}", 'PENDING')
				dir("${GITHUB_PR_SOURCE_BRANCH}") {
					sh "cp .env.dev .env"
					sh "cp docker/build/docker-compose.jenkins.yml docker-compose.yml"
				}
			}
		}

		stage ('Run docker-compose') {
			when {
				expression { "${GITHUB_PR_STATE}" == 'OPEN' }
			}
			steps {
				writeGitHubPullRequestStatus("${env.STAGE_NAME}", 'PENDING')
				dir("${GITHUB_PR_SOURCE_BRANCH}") {
					script {
						echo "${MYSQL_PORT}"
						def env = "-e REDIS_HOST=${GITHUB_PR_SOURCE_BRANCH}._toplivo_back_redis -e CENTRIFUGO_BASE_URL=http://${GITHUB_PR_SOURCE_BRANCH}._toplivo_back_centrifugo:8000 -e DATABASE_HOST=${GITHUB_PR_SOURCE_BRANCH}._toplivo_back_mysql"
						try {
							sh "cp docker/php/parameters.yml.dist project/app/config/parameters.yml"
							sh "docker-compose up -d --build"
						}
						catch (exc) {
							sh "docker-compose down"
							currentBuild.result = 'FAILURE'
							stageResult."{STAGE_NAME}" = "FAILURE"
						}

						try {
							sh "docker-compose exec -T php php bin/console doctrine:database:create --connection=tracking"
						}
						catch (exc) {
							echo "DB tracking already exist"
						}

						try {
							sh "docker-compose exec -T php composer install"

							sh "docker-compose exec ${env} -T php php bin/console --configuration=./app/config/doctrine/migrations.yml doctrine:migrations:migrate --allow-no-migration --no-interaction --no-debug"
							sh "docker-compose exec ${env} -T php php bin/console --em=tracking --configuration=./app/config/doctrine/tracking_migrations.yml doctrine:migrations:migrate --allow-no-migration --no-interaction --no-debug"

				            sh "docker-compose exec ${env} -T php php bin/console cache:clear"
				            sh "docker-compose exec ${env} -T php php bin/console cache:warmup --env=dev"
				            sh "docker-compose exec ${env} -T php php bin/console doctrine:cache:clear-metadata --env=dev"

						    sh "docker-compose exec -T php chown -R www-data:www-data var/ web/"

							sh "docker-compose exec -T php_cli bash /entrypoint.sh"
							sh "docker-compose exec ${env} -T php php /var/www/html/bin/console assets:install --symlink"

						}
						catch (exc) {
							sh "docker-compose down"
							currentBuild.result = 'FAILURE'
							stageResult."{STAGE_NAME}" = "FAILURE"
						}


					}
				}
			}
		}


		stage ('Close PR: stop docker')
		{
			when {
				expression { "${GITHUB_PR_STATE}" == 'CLOSED' }
			}
			steps
			{
				buildDescription "${GITHUB_PR_SOURCE_BRANCH}"
				writeGitHubPullRequestStatus("${env.STAGE_NAME}", 'PENDING')
				dir("${GITHUB_PR_SOURCE_BRANCH}") {
					sh "docker-compose exec -T php rm -R *"
					sh 'docker-compose down'
				}
			}
		}

		stage ('Close PR: remove directory')
		{
			when {
				expression { "${GITHUB_PR_STATE}" == 'CLOSED' }
			}
			steps
			{
				writeGitHubPullRequestStatus("${env.STAGE_NAME}", 'PENDING')
				script {
					dir("${GITHUB_PR_SOURCE_BRANCH}") {
						deleteDir()
					}
				}
			}
		}


	}

	post {
      success {
          writeGitHubPullRequestStatus("Job finished", 'SUCCESS')
          //gitHubPRStatus githubPRMessage('${env.STAGE_NAME}')
      }
      failure {
          writeGitHubPullRequestStatus("Job finished", 'FAILURE')
      }
    }
}