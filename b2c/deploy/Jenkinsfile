pipeline {
	agent { node { label 'toplivo-production-ssh' } }
	options {
		skipDefaultCheckout true
	}
	environment {
		DOCKER_USERNAME='jenkins'
        DOCKER_PASSWORD='ch1qySOXu8Q'
        DOCKER_REGISTRY='registry.digitalocean.com/jf-toplyvo'
    }
	parameters {
        gitParameter name: 'TAG',
                     type: 'PT_TAG',
                     defaultValue: 'v2.0.0',
                     description: 'Tag og docker image\'s build',
                     quickFilterEnabled: true,
                     sortMode: 'DESCENDING_SMART',
                     useRepository: 'git@github.com:transloyd/core.toplyvo.app.git',
                     tagFilter: 'v*'

    }
	stages {

		stage ('Get build configuration') {
			steps {
				buildDescription "${params.TAG}"
				script { try {
					// this checkout is needed for gitParameter plugin
					checkout([
						$class: 'GitSCM',
						branches: [[name: '*/master']],
						doGenerateSubmoduleConfigurations: false,
						extensions: [
							[$class: 'RelativeTargetDirectory', relativeTargetDir: 'source']
						],
						submoduleCfg: [],
						userRemoteConfigs: [[
							credentialsId: '7303d04c-541b-49a3-83f2-834b64810cc5',
							url: 'git@github.com:transloyd/core.toplyvo.app.git'
						]]
					])
					sh 'rm -rf docker environments || true'
                    sh "cd source && mv docker ../"
                    sh 'rm -rf source'
				} catch (exc) {}}
			}
		}

		stage ('Login to Registry') {
			steps {
				script {
	                //sh "docker login $DOCKER_REGISTRY -u=$DOCKER_USERNAME -p=$DOCKER_PASSWORD"
	                sh "doctl registry login"
                }

			}
		}

		stage ('Remove previous builds') {
			steps {
				script {
	                def previousBuild = currentBuild.getPreviousBuild().getRawBuild().actions.find{ it instanceof ParametersAction }?.parameters.find{it.name == 'TAG'}?.value
					try {
                        sh "docker rmi -f \$(docker images -q --filter 'before=${DOCKER_REGISTRY}/prod_toplyvo_php_fpm:${previousBuild}' --filter=reference='${DOCKER_REGISTRY}/*')"
					} catch (exc) {}
                }

			}
		}

		stage ('Download builds') {

			steps {
				script {
					sh "docker pull ${DOCKER_REGISTRY}/prod_toplyvo_php_fpm:${params.TAG}"
					sh "docker pull ${DOCKER_REGISTRY}/prod_toplyvo_php_consumer:${params.TAG}"
					sh "docker pull ${DOCKER_REGISTRY}/prod_toplyvo_php_cron:${params.TAG}"
					sh "docker pull ${DOCKER_REGISTRY}/prod_toplyvo_nginx:${params.TAG}"

					sh "docker pull ${DOCKER_REGISTRY}/prod_toplyvo_php_fpm"
                    sh "docker pull ${DOCKER_REGISTRY}/prod_toplyvo_php_consumer"
                    sh "docker pull ${DOCKER_REGISTRY}/prod_toplyvo_php_cron"
                    sh "docker pull ${DOCKER_REGISTRY}/prod_toplyvo_nginx"
				}
			}
		}

		stage ('Apply builds') {
			environment {
				IMAGE_TAG="${params.TAG}"
			}
			steps {
				script {
					sshagent(['7303d04c-541b-49a3-83f2-834b64810cc5']) {
						sh "git clone git@github.com:transloyd/environments.git"
					}

					sh "cp docker/build/docker-compose.prod.yml docker-compose.yml"

					sh "cp environments/b2c/.env .env"

					// test sections
					sh "docker-compose up -d --remove-orphans nginx varnish varnish_nginx centrifugo oracle_stunnel"
					// test sections

					sh "docker-compose up -d --force-recreate php-cron"
                    sh "docker-compose exec -T php-cron php bin/console --configuration=./app/config/doctrine/migrations.yml doctrine:migrations:migrate --allow-no-migration --no-interaction --env=prod"
                    sh "docker-compose exec -T php-cron php bin/console --em=tracking  --configuration=./app/config/doctrine/tracking_migrations.yml doctrine:migrations:migrate --allow-no-migration --no-interaction --env=prod"

					sh "docker-compose up -d --remove-orphans --force-recreate"

				}
			}
		}

		stage ('Logout from Registry') {
			steps {
				script {
	                //sh "docker logout $DOCKER_REGISTRY"
	                sh "doctl registry logout"
                }

			}
		}

	}
}